# Pulse meter configuration #

# Enable Home Assistant API
api:
  services:
    - service: reset_total_energy
      then:
        - button.press:
            id: button_reset_total

number:
  # Set the pulse rate of the LED on your meter
  - platform: template
    id: select_pulse_rate
    name: 'Pulse rate - imp/kWh'
    optimistic: true
    mode: box
    min_value: 100
    max_value: 10000
    step: 100
    restore_value: yes
    initial_value: 1000

  # Reset total energy to given value
  - platform: template
    id: select_reset_total
    name: 'Reset Value - Total Energy kWh'
    entity_category: config
    optimistic: true
    mode: box
    min_value: 0
    max_value: 1000000
    step: 1
    initial_value: 0

button:
  # Reset the total energy entity
  - platform: template
    id: button_reset_total
    name: "Reset Total Energy"
    on_press:
      - pulse_meter.set_total_pulses:
          id: power_consumption
          value: !lambda "return id(select_reset_total).state * id(select_pulse_rate).state;"

sensor:
  # Pulse meter
  - platform: pulse_meter
    id: power_consumption
    name: Power Consumption
    unit_of_measurement: W
    state_class: measurement
    device_class: power
    icon: mdi:flash-outline
    accuracy_decimals: 0
    pin:
      number: ${pulse_pin}
      inverted: true
      mode:
        input: true
    internal_filter: 10ms
    internal_filter_mode: pulse
#    on_raw_value:
#      then:
#        - light.turn_on:
#            id: led_red
#        - delay: 0.2s
#        - light.turn_off:
#            id: led_red
    filters:
      # multiply value = (60 / imp value) * 1000
      # - multiply: 60
      - lambda: return x * ((60.0 / id(select_pulse_rate).state) * 1000.0);
    on_value:
      then:
        -  script.execute: pulse
        
    total:
      id: total_energy
      name: Total Energy
      unit_of_measurement: kWh
      icon: mdi:circle-slice-3
      state_class: total_increasing
      device_class: energy
      accuracy_decimals: 3
      filters:
        # multiply value = 1 / imp value
        # - multiply: 0.001
        - lambda: return x * (1.0 / id(select_pulse_rate).state);

  # Total day usage
  - platform: total_daily_energy
    id: daily_energy
    name: Daily Energy
    power_id: power_consumption
    unit_of_measurement: kWh
    icon: mdi:circle-slice-3
    state_class: total_increasing
    device_class: energy
    accuracy_decimals: 3
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
      
# Enable time component to reset daily energy at midnight
# https://esphome.io/components/time/homeassistant.html
time:
  - platform: homeassistant
    id: homeassistant_time
